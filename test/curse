#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# 2012 Nico Schottelius (nico-ceof at schottelius.org)
#
# This file is part of ceof.
#
# ceof is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# ceof is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with ceof. If not, see <http://www.gnu.org/licenses/>.
#
#

import curses
import curses.textpad


class UI(object):
    """UI class for end user usage"""

    def __init__(self, args):
        self.host = args.address
        self.port = args.port

    def curses_start(self):
        # Begin curse
        self.stdscr = curses.initscr()

        # React on characters without return
        curses.cbreak()

        # Enable cursor support
        self.stdscr.keypad(1)

        self.height, self.width = self.stdscr.getmaxyx()

    def init_windows(self):
        self.window = {}

       # Header data
        self.window["header"] = {}
        self.window["input"] = {}
        self.window["text"] = {}

        self.window["header"]["height"] = 2
        self.window["input"]["height"] = 2
        self.window["text"]["height"] = self.height - \
            self.window["input"]["height"] - self.window["header"]["height"]

        self.window["header"]["window"] = \
            curses.newwin(self.window["header"]["height"], 0, 0 , 0)
        self.window["text"]["window"] = \
            curses.newwin(self.window["text"]["height"], 0, self.window["header"]["height"], 0)
        self.window["input"]["window"] = \
            curses.newwin(self.window["input"]["height"], 0, 
                self.window["text"]["height"] + self.window["header"]["height"], 0)

        # Header: With version and name
        self.window["header"]["window"].insstr(0, 0, "ceof - " + "3")

        # Text: enable scrolling
        self.window["text"]["window"].scrollok(True)
        self.window["text"]["window"].idlok(1)

        # Input: Allow better editing
        self.window["input"]["tb"] = curses.textpad.Textbox(self.window["input"]["window"])

        #self.clean_window("input")
        #self.clean_window("text")

        self.refresh_windows()

    def move_cursor_at_begin(self):
        self.window["input"]["window"].move(1,2)

    def refresh_windows_specific(self, windows):
        """refresh/redraw all windows specified in windows list"""

        for window in windows:
            self.window[window]["window"].refresh()

    def refresh_windows(self):
        # Add bars
        self.window["header"]["window"].insstr(1, 0, self.width * '-')
        self.window["input"]["window"].insstr(0, 0, self.width * '-')

        self.refresh_windows_specific(self.window)

    def clean_window(self, window):
        self.window[window]["window"].erase()
        self.refresh_windows_specific([window])

    def read_line(self):

        line = self.window["input"]["tb"].edit()
        self.clean_window("input")
        return line

        line = []
        while True:
            c = self.window["input"]["window"].getch()

            if c != ord('\n'):
                line.append(chr(c))
            else:
                break

        self.clean_window("input")
        return "".join(line)

    def write_text(self, window, x, y, text):
        """write text to a window"""
        self.window["text"]["window"].addstr(x, y, text)
        self.window["text"]["window"].refresh()

    def write_line(self, line):
        """Write line of text to text window and scroll"""

        lineno = self.window["text"]["height"] - 1
        self.window["text"]["window"].scroll()
        self.refresh_windows()
        self.write_text("text", lineno, 1, line)

    def append_text(self, text):
        """Write text at current position in text window"""

        self.window["text"]["window"].addstr(text)
        self.window["text"]["window"].refresh()

    def curses_stop(self):
        curses.nocbreak()
        self.stdscr.keypad(0)
        curses.echo()
        curses.endwin()

    def connect(self):
        self.write_line("Trying to connect to %s:%s ... " % (self.host, self.port))

    def try_to_connect(self):

        for i in range(0,3):
            if self.connect():
                break
            else:
                self.append_text(str(self.net.error))

    def run(self):
        self.curses_start()
        self.init_windows()
        self.try_to_connect()

        self.doquit = False
        while not self.doquit:
            self.move_cursor_at_begin()
            line = self.read_line()

            if line == "/quit" or line == "q":
                break
            else:
                #self.write_text("text", 1, 1, line)
                self.write_line(line)
                print(line)

        self.curses_stop()

    def trun(self):
        self.curses_start()
        window = curses.newwin(0,0) 
        
        self.curses_stop()

class Args(object):

    def __init__(self):
        self.address = "127.0.0.1"
        self.port = 22


if __name__ == "__main__":
    args = Args()
    ui = UI(args)

    ui.run()
