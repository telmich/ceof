#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# 2012 Nico Schottelius (nico-ceof at schottelius.org)
#
# This file is part of ceof.
#
# ceof is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# ceof is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with ceof. If not, see <http://www.gnu.org/licenses/>.
#
#

def commandline():
    """Parse command line"""
    import argparse
    import ceof.config

    # Construct parser others can reuse
    parser = {}
    # Options _all_ parsers have in common
    parser['all'] = argparse.ArgumentParser(add_help=False)
    parser['all'].add_argument('-d', '--debug',
        help='Set log level to debug', action='store_true',
        default=False)
    parser['all'].add_argument('-v', '--verbose',
        help='Set log level to info, be more verbose',
        action='store_true', default=False)
    parser['all'].add_argument('-c', '--config-dir',
        help='Select configuration directory ($HOME/.ceof by default)',
        action='store')

    # Main subcommand parser
    parser['main'] = argparse.ArgumentParser(description='ceof ' + ceof.VERSION,
        parents=[parser['all']])
    parser['main'].add_argument('-V', '--version',
        help='Show version', action='version',
        version='%(prog)s ' + ceof.VERSION)
    parser['sub'] = parser['main'].add_subparsers(title="Commands")

    # Banner
    #parser['banner'] = parser['sub'].add_parser('banner', 
    #    parents=[parser['loglevel']])
    #parser['banner'].set_defaults(func=ceof.banner.banner)

    parser['crypto'] = parser['sub'].add_parser('crypto',
        parents=[parser['all']])
    parser['crypto'].add_argument('--encrypt',
         help='Encrypt from stdin (specify recipients)',
         action='store', nargs='+')
    parser['crypto'].add_argument('--decrypt',
         help='Decrypt from stdin', action='store_true')
    parser['crypto'].add_argument('-e', '--export',
         help='Export public key to stdout', action='store_true')
    parser['crypto'].add_argument('-f', '--fingerprint',
         help='Show key fingerprint', action='store_true')
    parser['crypto'].add_argument('-g', '--gen-key',
         help='Generate new private/public key pair', action='store_true')
    parser['crypto'].add_argument('-i', '--import', dest='import_key',
         help='Import public key from stdin', action='store_true')
    parser['crypto'].add_argument('-l', '--length',
         help='Specify bit length for key generation', action='store',
         default=2048)
    parser['crypto'].add_argument('--name',
         help='Name (for key generate)', action='store', 
         default="Your Friendly Name")
    parser['crypto'].add_argument('--email-address',
         help='E-Mail-Address (for key generate)', action='store',
         default="you@example.org")
    parser['crypto'].add_argument('-s', '--show',
         help='Show private/public key pair', action='store_true')
    parser['crypto'].set_defaults(func=ceof.Crypto.commandline)

    # Transport protocols - listener
    parser['listener'] = parser['sub'].add_parser('listener',
        parents=[parser['all']])
    parser['listener'].add_argument('-a', '--add',
         help='Add an address to listen on', action='append')
    parser['listener'].add_argument('-l', '--list',
         help='List listener', action='store_true')
    parser['listener'].add_argument('-r', '--remove',
         help='Remove an address to listen on', action='append')
    parser['listener'].set_defaults(func=ceof.Listener.commandline)

    # Noise engine - prints noise to stdout
    parser['noise'] = parser['sub'].add_parser('noise',
        parents=[parser['all']])
    parser['noise'].set_defaults(func=ceof_noise)

    # Onion
    parser['onion'] = parser['sub'].add_parser('onion',
        parents=[parser['all']])
    parser['onion'].add_argument('name', nargs='?',
         help='Name of the peer', action='store')
    parser['onion'].add_argument('-m', '--message',
         help='Create onion with this message for peer', action='store')
    parser['onion'].add_argument('-s', '--send',
         help='Send message created to peer', action='store_true')
    parser['onion'].set_defaults(func=ceof.Onion.commandline)

     # Server to accept ui connections
    parser['peer'] = parser['sub'].add_parser('peer',
        parents=[parser['all']])
    parser['peer'].add_argument('name', nargs='?',
         help='Name of the peer (myself: you)', action='store')
    parser['peer'].add_argument('-a', '--add',
         help='Add a peer', action='store_true')
    parser['peer'].add_argument('-r', '--remove',
         help='Remove a peer', action='store_true')
    parser['peer'].add_argument('-l', '--list',
         help='List peers', action='store_true')
    parser['peer'].add_argument('-f', '--fingerprint',
         help='Specify fingerprint for peer', action='store')
    parser['peer'].add_argument('--add-address',
         help='Add an address to a peer', action='append')
    parser['peer'].add_argument('--remove-address',
         help='Remove an address from a peer', action='append')
    parser['peer'].set_defaults(func=ceof.Peer.commandline)

   # General Server
    parser['server'] = parser['sub'].add_parser('server',
        parents=[parser['all']])
    parser['server'].add_argument('-l', '--no-listener',
         help='Disable listener server', action='store_false')
    parser['server'].add_argument('-n', '--no-noise',
         help='Disable noise sending', action='store_false')
    parser['server'].add_argument('-u', '--no-ui',
         help='Disable UI server', action='store_false')
    parser['server'].add_argument('-a', '--ui-address',
         help='Listen on this address for UI connections', action='store',
         default='127.0.0.1')
    parser['server'].add_argument('-p', '--ui-port',
         help='Listen on this port for UI connections', action='store',
         default='4242')
    parser['server'].set_defaults(func=ceof.Server.commandline)

    # Transport protocols
    parser['tp'] = parser['sub'].add_parser('tp',
        parents=[parser['all']])
    parser['tp'].add_argument('name', nargs='?',
         help='Name of the peer', action='store')
    parser['tp'].add_argument('--chain-to',
         help='Generate onion package for given peer', action='store_true')
    parser['tp'].add_argument('-l', '--list',
         help='List available transport protocols', action='store_true')
    parser['tp'].add_argument('-r', '--route-to',
         help='Generate route to given peer', action='store_true')
    parser['tp'].set_defaults(func=ceof.TransportProtocol.commandline)

    # User interface
    parser['ui'] = parser['sub'].add_parser('ui',
        parents=[parser['all']])
    parser['ui'].add_argument('-a', '--address',
         help='Address to connect to', action='store',
         default='127.0.0.1')
    parser['ui'].add_argument('-p', '--port',
         help='Port to connect to', action='store',
         default='4242')
    parser['ui'].set_defaults(func=ceof_ui)


    # Server to accept ui connections
    parser['uiserver'] = parser['sub'].add_parser('uiserver',
        parents=[parser['all']])
    parser['uiserver'].add_argument('-a', '--address',
         help='Listen on this address for UI connections', action='store',
         default='127.0.0.1')
    parser['uiserver'].add_argument('-p', '--port',
         help='Listen on this port for UI connections', action='store',
         default='4242')
    parser['uiserver'].set_defaults(func=ceof_uiserver)

    for p in parser:
        parser[p].epilog = "Get ceof at http://www.nico.schottelius.org/software/ceof/"

    args = parser['main'].parse_args(sys.argv[1:])

    # Loglevels are handled globally in here and debug wins over verbose
    if args.verbose:
        logging.root.setLevel(logging.INFO)
    if args.debug:
        logging.root.setLevel(logging.DEBUG)

    log.debug(args)

    try:
        config = ceof.Config(args.config_dir)
    except ceof.config.ConfigError as e:
        print("Configuration directory issues may be fixed using -c parameter")
        raise

    args.func(args, config)

def ceof_noise(args, config):
    noise = ceof.Noise(config.noise_dir)
    noise.start()

    while True:
        print("Noise: ---\"%s\"---" % noise.get())

def ceof_ui(args, config):
    ui = ceof.UI(args)
    ui.run()

def ceof_uiserver(args, config):
    uiserv = ceof.UIServer(args.address, args.port)
    uiserv.run()

if __name__ == "__main__":
    # Sys is needed for sys.exit()
    import sys

    exit_code = 0

    try:
        import logging
        import os
        import re

        # Ensure our /lib/ is included into PYTHON_PATH
        sys.path.insert(0, os.path.abspath(
                os.path.join(os.path.dirname(os.path.realpath(__file__)), '../lib')))

        # And now import our stuff
        import ceof

        log = logging.getLogger("ceof")

        # Setup root logger for us only
        rootlog = logging.getLogger(None)
        logfilter = logging.Filter(name='ceof')
        rootlog.addFilter(logfilter)

        logging.basicConfig(format='%(levelname)s: %(message)s')

        commandline()

    except KeyboardInterrupt:
        pass

    except (ceof.Error, ImportError) as e:
        print(e)
        exit_code = 1

    # Determine exit code by return value of function

    sys.exit(exit_code)
