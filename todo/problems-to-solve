- Resend of packets? sequence numbers?
- Finding nodes (telefonbuch. telefonbuch? telefonbuch!)
- Updating address information?
    - How fast need/will addresses change?
    - Local caching?
    - Request via E-Mail?
        - direct contact
        - builtin transport protocol => use throw away addresses
    - Implement message types?

- Message types
    - noise
    - message
    - address information
    - open for more types?
    - combination possible? [already in EOF.pdf]
- message acknowledgement
    - tcp vs. udp
- routing?
    - finding nodes
    - finding paths
    - source based routing (?)
    - compare to routing protocols

- attacks:
Timing analysis: Incoming and outgoing messages passing through a relatively under-loaded node can be linked by observing how close together in time they are received and re-sent. However, this weakness can be overcome by buffering several messages and then transmitting them using a pseudorandom timing algorithm.[citation needed]
Intersection attacks: Nodes periodically fail or leave the network; any chain that remains functioning cannot have been routed through either the nodes that left or the nodes that recently joined the network, increasing the chances of a successful traffic analysis.
Predecessor attacks: A compromised node can keep track of a session as it occurs over multiple chain reformations (chains are periodically torn down and rebuilt). If the same session is observed over the course of enough reformations, the compromised node tends to connect with the particular sender more frequently than any [other] node, increasing the chances of a successful traffic analysis.[2]
Exit node sniffing: An exit node (the last node in a chain) has complete access to the content being transmitted from the sender to the recipient; Dan Egerstad, a Swedish researcher, used such an attack to collect the passwords of over 100 email accounts related to foreign embassies.[3] However, this weakness can be overcome by employing end-to-end encryption (that is, encryption between the sender and the recipient), such as SSL.

    [http://en.wikipedia.org/wiki/Onion_routing]    
